#!/bin/bash

set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# Read inputs
payload=$(mktemp "$TMPDIR/apt-package-resource-request.XXXXXX")
cat > "$payload" <&0

# Parse parameters
repo_uri=$(jq -r '.source.repo_uri // ""' < "$payload")
component=$(jq -r '.source.component // "main"' < "$payload")
distribution=$(jq -r '.source.distribution // ""' < "$payload")
architecture=$(jq -r '.source.architecture // "amd64"' < "$payload")
package=$(jq -r '.source.package // ""' < "$payload")
gpg_key_id=$(jq -r '.source.gpg_key_id // ""' < "$payload")
version=$(jq -r '.version.ref // "latest"' < "$payload")

aptly mirror show "${package}-mirror" > /dev/null
rc=$?
if [[ $rc != 0 ]] ; then
    gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv "${gpg_key_id}" 1>&- 2>&-
    gpg --no-default-keyring -a --export "${gpg_key_id}" | gpg --no-default-keyring --keyring ~/.gnupg/trustedkeys.gpg --import - 1>&- 2>&-
    aptly mirror create -filter="$package" -architectures="${architecture}" "${package}-mirror" "${repo_uri}" "${distribution}" "${component}" > /dev/null
fi
aptly mirror update "${package}-mirror" 1>&- 2>&-
/opt/resource/apt-package-resource check "${package}" "${version}"
