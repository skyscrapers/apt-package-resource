#!/bin/bash

set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# Read inputs
payload=$(mktemp "$TMPDIR/apt-package-resource-request.XXXXXX")
cat > "$payload" <&0

cat "$payload" >&2
echo "" >&2

# Parse parameters
repo_uri=$(jq -r '.source.repo_uri // ""' < "$payload")
component=$(jq -r '.source.component // "main"' < "$payload")
distribution=$(jq -r '.source.distribution // ""' < "$payload")
architecture=$(jq -r '.source.architecture // "amd64"' < "$payload")
package=$(jq -r '.source.package // ""' < "$payload")
gpg_key_id=$(jq -r '.source.gpg_key_id // ""' < "$payload")
gpg_key_content=$(jq -r '.source.gpg_key_content // ""' < "$payload")
gpg_key_server=$(jq -r '.source.gpg_key_server // "hkp://p80.pool.sks-keyservers.net:80"' < "$payload")
version=$(jq -r '.version.ref // "latest"' < "$payload")

echo "Aptly Mirror Show" >&2
aptly mirror show "${package}-mirror" >&2
rc=$?
if [[ $rc != 0 ]] ; then
    echo "Receive & Import GPG Key" >&2
    gpg_options="--no-default-keyring --keyring trustedkeys.gpg"
    if [ -n "$gpg_key_content" ]; then
      gpg_key_file=$(mktemp "$TMPDIR/apt-gpg-key-content.XXXXXX")
      echo "$gpg_key_content" > $gpg_key_file
      gpg_options="$gpg_options add $gpg_key_file"
    else
      gpg_options="$gpg_options --keyserver \"${gpg_key_server}\" --recv-keys \"${gpg_key_id}\""
    fi
    gpg $gpg_options >&2
    echo "Aptly Mirror Create" >&2
    aptly mirror create -filter="$package" -architectures="${architecture}" "${package}-mirror" "${repo_uri}" "${distribution}" "${component}" >&2
fi
echo "Aptly Mirror Update" >&2
aptly mirror update "${package}-mirror" >&2
echo "apt-package-resource check" >&2
/opt/resource/apt-package-resource check "${package}" "${version}" >&3
